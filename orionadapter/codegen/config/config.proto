syntax = "proto3";

// config for orionadapter
package orionadapter;

option go_package = "config";

// config for getting an ID token from DAPS.
message Daps {
    // identifies the connector within DAPS/IDS; usually a UUID.
    string connector_id = 1;
    // e.g. "https://consumerconnector.fiware.org"
    string connector_audience = 2;
    // how many seconds from now before the JWT in the request expires.
    uint32 seconds_before_expiry = 3;
    // connector's own RSA private key in PEM format.
    // TODO: rather store somewhere else, see
    // - https://github.com/orchestracities/boost/issues/15
    string private_key = 4;
    // connector's own certificate to authenticate with DAPS; paired to
    // the private key and in PEM format.
    // TODO: see https://github.com/orchestracities/boost/issues/15
    string connector_certificate = 5;
    // DAPS server certificate, in PEM format, the connector should use
    // to authenticate the server.
    // TODO: see https://github.com/orchestracities/boost/issues/15
    string server_certificate = 6;
    // DAPS server host or host:port.
    string server_host = 7;
}

// config for using an AuthZ to authorise access to Orion resources.
message AuthZ {
    // should the adapter use AuthZ?
    bool enabled = 1;
    // AuthZ authorisation endpoint.
    // e.g. 'http://your.authz', 'https://your.authz:44300'
    string server_url = 2;
    // HS256 shared secret to validate IDS authorization tokens.
    // TODO: rather store somewhere else, see
    // - https://github.com/orchestracities/boost/issues/15
    string hs256_shared_secret = 3;
    // Max cache age, in seconds, for AuthZ decisions.
    // If not present or set to a non-positive value, don't cache decisions.
    // If a positive value `v`, cache an AuthZ decision for `s` seconds where
    // `s = min { ttl(consumerJWT), ttl(userJWT), v }`
    uint64 cache_decision_max_seconds = 4;
}

// config for orionadapter
message Params {

    // IDSA public key to use for validating client tokens.
    // TODO: see https://github.com/orchestracities/boost/issues/15
    string idsa_public_key = 1;

    // IDSA private key to use for signing server tokens.
    // TODO: rather store somewhere else, see
    // - https://github.com/orchestracities/boost/issues/15
    string idsa_private_key = 2;

    // config for getting an ID token from DAPS.
    Daps daps = 3;

    // template for the JSON holding the ID token the connector got
    // from DAPS.
    string id_token_json_template = 4;

    // config for using an AuthZ to authorise access.
    AuthZ authz = 5;
}
